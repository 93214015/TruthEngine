#pragma once


enum class TE_IDX_CONSTANTBUFFER : IDX
{
	NONE,

	ARRAYS_PER_MESH,
	ARRAYS_MATERIALS,
	ARRAYS,

	PER_FRAME,
	PER_OBJECT,
	PER_MESH,
	LIGHTDATA,
	MATERIALS,
	UNFREQUENT,

	DIRECT_CONSTANTS,
	DIRECT_PER_MESH,
	DIRECT_SHADOWMAP_PER_MESH,
	DIRECT_SHADOWMAP_PER_LIGHT,
};


enum class TE_IDX_TEXTURE : IDX
{
	MATERIALTEXTURES,
	CUBEMAP_ENVIRONMENT,
	RT_BACKBUFFER,
	RT_GBUFFER_COLOR,
	RT_GBUFFER_NORMAL,
	RT_GBUFFER_SPECULAR,
	RT_SCENEBUFFER,
	DS_SCENEBUFFER,
	DS_SHADOWMAP,
};

inline bool IsIDXTextureMaterialTexture(TE_IDX_TEXTURE _IDX)
{
	return _IDX == TE_IDX_TEXTURE::MATERIALTEXTURES;
}
inline bool IsIDXTextureCubeMap(TE_IDX_TEXTURE _IDX)
{
	return _IDX == TE_IDX_TEXTURE::CUBEMAP_ENVIRONMENT;
}
inline bool IsIDXTextureRenderTarget(TE_IDX_TEXTURE _IDX)
{
	return (static_cast<uint32_t>(_IDX) >= static_cast<uint32_t>(TE_IDX_TEXTURE::RT_BACKBUFFER) && static_cast<uint32_t>(_IDX) <= static_cast<uint32_t>(TE_IDX_TEXTURE::RT_SCENEBUFFER));
}
inline bool IsIDXTextureDepthStencil(TE_IDX_TEXTURE _IDX)
{
	return (static_cast<uint32_t>(_IDX) >= static_cast<uint32_t>(TE_IDX_TEXTURE::DS_SCENEBUFFER) && static_cast<uint32_t>(_IDX) <= static_cast<uint32_t>(TE_IDX_TEXTURE::DS_SHADOWMAP));
}

enum class TE_IDX_SHADERCLASS : IDX
{
	NONE,
	FORWARDRENDERING,
	GENERATEBASICSHADOWMAP,
	RENDERBOUNDINGBOX,
	RENDERENVIRONMENTMAP,
	TOTALNUM
};

enum class TE_IDX_RENDERPASS : IDX
{
	NONE,
	FORWARDRENDERING,
	GENERATEBASICSHADOWMAP,
	RENDERBOUNDINGBOX,
};

enum class TE_IDX_MESH_TYPE : IDX
{
	MESH_POINT,
	MESH_SIMPLE,
	MESH_NTT,
	TOTALNUM
};